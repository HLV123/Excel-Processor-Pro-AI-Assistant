import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import random

# Set random seed for reproducible data
np.random.seed(42)
random.seed(42)

def create_sample_data_with_nan():
    """T·∫°o file Excel m·∫´u c√≥ ch·ª©a gi√° tr·ªã NaN ƒë·ªÉ test x·ª≠ l√Ω"""
    
    print("T·∫°o file d·ªØ li·ªáu c√≥ NaN: doanh_so_co_nan.xlsx")
    
    # Base data
    regions = ['H√† N·ªôi', 'TP.HCM', 'ƒê√† N·∫µng', 'H·∫£i Ph√≤ng', 'C·∫ßn Th∆°', 'Nha Trang', 'Hu·∫ø', 'V≈©ng T√†u']
    products = ['Laptop Dell', 'Laptop HP', 'Laptop Asus', 'iPhone 15', 'Samsung Galaxy', 'iPad Pro', 
                'MacBook Air', 'Surface Pro', 'Gaming PC', 'Monitor 4K', 'Chu·ªôt gaming', 'B√†n ph√≠m c∆°']
    months = ['2024-01', '2024-02', '2024-03', '2024-04', '2024-05', '2024-06',
              '2024-07', '2024-08', '2024-09', '2024-10', '2024-11', '2024-12']
    salespeople = ['Nguy·ªÖn VƒÉn A', 'Tr·∫ßn Th·ªã B', 'L√™ VƒÉn C', 'Ph·∫°m Th·ªã D', 'Ho√†ng VƒÉn E', 'V≈© Th·ªã F']
    
    sales_data = []
    for i in range(300):  # 300 b·∫£n ghi
        sales_data.append({
            'STT': i + 1,
            'Region': np.random.choice(regions),
            'Product': np.random.choice(products),
            'Month': np.random.choice(months),
            'Sales': np.random.randint(50000, 2000000),
            'Quantity': np.random.randint(1, 50),
            'Cost': np.random.randint(20000, 1500000),
            'Salesperson': np.random.choice(salespeople),
            'Customer_Type': np.random.choice(['C√° nh√¢n', 'Doanh nghi·ªáp', 'ƒê·∫°i l√Ω']),
            'Discount': np.random.uniform(0, 0.3),
            'Rating': np.random.randint(1, 6),
            'Notes': f'Ghi ch√∫ {i+1}' if np.random.random() > 0.3 else ''
        })
    
    df = pd.DataFrame(sales_data)
    
    # Calculate derived columns
    df['Profit'] = df['Sales'] - df['Cost']
    df['Profit_Margin'] = (df['Profit'] / df['Sales']) * 100
    df['Revenue_Per_Item'] = df['Sales'] / df['Quantity']
    
    # INJECT NaN VALUES STRATEGICALLY
    print("üîß ƒêang ch√®n gi√° tr·ªã NaN...")
    
    # 1. REGION - 5% NaN (√≠t NaN)
    nan_indices = np.random.choice(df.index, size=int(len(df) * 0.05), replace=False)
    df.loc[nan_indices, 'Region'] = np.nan
    print(f"   ‚Ä¢ Region: {len(nan_indices)} NaN (5%)")
    
    # 2. SALES - 10% NaN (trung b√¨nh NaN)  
    nan_indices = np.random.choice(df.index, size=int(len(df) * 0.10), replace=False)
    df.loc[nan_indices, 'Sales'] = np.nan
    print(f"   ‚Ä¢ Sales: {len(nan_indices)} NaN (10%)")
    
    # 3. QUANTITY - 15% NaN (kh√° nhi·ªÅu NaN)
    nan_indices = np.random.choice(df.index, size=int(len(df) * 0.15), replace=False)
    df.loc[nan_indices, 'Quantity'] = np.nan
    print(f"   ‚Ä¢ Quantity: {len(nan_indices)} NaN (15%)")
    
    # 4. COST - 20% NaN (nhi·ªÅu NaN)
    nan_indices = np.random.choice(df.index, size=int(len(df) * 0.20), replace=False)
    df.loc[nan_indices, 'Cost'] = np.nan
    print(f"   ‚Ä¢ Cost: {len(nan_indices)} NaN (20%)")
    
    # 5. SALESPERSON - 25% NaN (r·∫•t nhi·ªÅu NaN)
    nan_indices = np.random.choice(df.index, size=int(len(df) * 0.25), replace=False)
    df.loc[nan_indices, 'Salesperson'] = np.nan
    print(f"   ‚Ä¢ Salesperson: {len(nan_indices)} NaN (25%)")
    
    # 6. DISCOUNT - 30% NaN (c·ª±c nhi·ªÅu NaN)
    nan_indices = np.random.choice(df.index, size=int(len(df) * 0.30), replace=False)
    df.loc[nan_indices, 'Discount'] = np.nan
    print(f"   ‚Ä¢ Discount: {len(nan_indices)} NaN (30%)")
    
    # 7. RATING - 60% NaN (qu√° nhi·ªÅu NaN - n√™n c·∫£nh b√°o)
    nan_indices = np.random.choice(df.index, size=int(len(df) * 0.60), replace=False)
    df.loc[nan_indices, 'Rating'] = np.nan
    print(f"   ‚Ä¢ Rating: {len(nan_indices)} NaN (60%) - C·∫£nh b√°o!")
    
    # 8. NOTES - 40% NaN (nhi·ªÅu NaN cho text)
    nan_indices = np.random.choice(df.index, size=int(len(df) * 0.40), replace=False)
    df.loc[nan_indices, 'Notes'] = np.nan
    print(f"   ‚Ä¢ Notes: {len(nan_indices)} NaN (40%)")
    
    # Recalculate derived columns (will have NaN where input is NaN)
    df['Profit'] = df['Sales'] - df['Cost']
    df['Profit_Margin'] = (df['Profit'] / df['Sales']) * 100
    df['Revenue_Per_Item'] = df['Sales'] / df['Quantity']
    
    # Save to Excel
    df.to_excel('doanh_so_co_nan.xlsx', index=False)
    
    # Print summary
    print(f"\n‚úÖ ƒê√£ t·∫°o file: doanh_so_co_nan.xlsx")
    print(f"üìä T·ªïng quan:")
    print(f"   ‚Ä¢ T·ªïng b·∫£n ghi: {len(df)}")
    print(f"   ‚Ä¢ T·ªïng c·ªôt: {len(df.columns)}")
    print(f"   ‚Ä¢ T·ªïng √¥: {df.size:,}")
    
    total_nan = df.isnull().sum().sum()
    nan_percentage = (total_nan / df.size) * 100
    print(f"   ‚Ä¢ T·ªïng √¥ NaN: {total_nan:,} ({nan_percentage:.1f}%)")
    
    print(f"\nüìã Chi ti·∫øt NaN theo c·ªôt:")
    for col in df.columns:
        nan_count = df[col].isnull().sum()
        if nan_count > 0:
            nan_pct = (nan_count / len(df)) * 100
            print(f"   ‚Ä¢ {col}: {nan_count} NaN ({nan_pct:.1f}%)")
    
    print(f"\nüéØ TEST SCENARIOS ƒê∆Ø√ú·ª¢C:")
    print(f"   ‚úÖ C·ªôt √≠t NaN (5%): Region - C√≥ th·ªÉ fill/drop")
    print(f"   ‚ö†Ô∏è C·ªôt trung b√¨nh NaN (10-20%): Sales, Cost - C·∫ßn chi·∫øn l∆∞·ª£c")  
    print(f"   ‚ùå C·ªôt nhi·ªÅu NaN (25-60%): Salesperson, Rating - C·∫£nh b√°o")
    print(f"   üî¢ C·ªôt s·ªë: Sales, Quantity, Cost, Discount - Test fill median/mean")
    print(f"   üìù C·ªôt text: Region, Product, Salesperson - Test fill mode/unknown")
    
    return 'doanh_so_co_nan.xlsx'

def create_extreme_nan_data():
    """T·∫°o file c√≥ NaN c·ª±c ƒë·ªô ƒë·ªÉ test edge cases"""
    
    print("\nT·∫°o file d·ªØ li·ªáu NaN c·ª±c ƒë·ªô: du_lieu_nan_cuc_do.xlsx")
    
    data = {
        'ID': range(1, 101),  # 100 b·∫£n ghi
        'Name': [f'Item {i}' for i in range(1, 101)],
        'Value1': np.random.randint(1, 100, 100),
        'Value2': np.random.randint(1, 100, 100),
        'Category': np.random.choice(['A', 'B', 'C'], 100),
        'Status': np.random.choice(['Active', 'Inactive'], 100),
        'Score': np.random.uniform(0, 10, 100),
        'Comment': [f'Comment {i}' if i % 3 == 0 else '' for i in range(100)]
    }
    
    df = pd.DataFrame(data)
    
    # EXTREME NaN injection
    
    # 1. C·ªôt 95% NaN - G·∫ßn nh∆∞ v√¥ d·ª•ng
    nan_indices = np.random.choice(df.index, size=95, replace=False)
    df.loc[nan_indices, 'Value1'] = np.nan
    print(f"   ‚Ä¢ Value1: 95% NaN - G·∫ßn nh∆∞ v√¥ d·ª•ng")
    
    # 2. C·ªôt 80% NaN - R·∫•t kh√≥ s·ª≠ d·ª•ng
    nan_indices = np.random.choice(df.index, size=80, replace=False)
    df.loc[nan_indices, 'Value2'] = np.nan
    print(f"   ‚Ä¢ Value2: 80% NaN - R·∫•t kh√≥ s·ª≠ d·ª•ng")
    
    # 3. C·ªôt 70% NaN - Nhi·ªÅu NaN
    nan_indices = np.random.choice(df.index, size=70, replace=False)
    df.loc[nan_indices, 'Score'] = np.nan
    print(f"   ‚Ä¢ Score: 70% NaN - Nhi·ªÅu NaN")
    
    # 4. C·ªôt to√†n NaN - Edge case
    df['All_NaN'] = np.nan
    print(f"   ‚Ä¢ All_NaN: 100% NaN - Edge case")
    
    # 5. C·ªôt kh√¥ng NaN - Baseline
    df['No_NaN'] = range(1, 101)
    print(f"   ‚Ä¢ No_NaN: 0% NaN - Baseline")
    
    df.to_excel('du_lieu_nan_cuc_do.xlsx', index=False)
    
    total_nan = df.isnull().sum().sum()
    nan_percentage = (total_nan / df.size) * 100
    print(f"‚úÖ T·∫°o xong file c·ª±c ƒë·ªô: {total_nan:,} NaN ({nan_percentage:.1f}%)")
    
    return 'du_lieu_nan_cuc_do.xlsx'

def create_mixed_data_types_with_nan():
    """T·∫°o file c√≥ nhi·ªÅu ki·ªÉu d·ªØ li·ªáu kh√°c nhau v·ªõi NaN"""
    
    print("\nT·∫°o file ƒëa ki·ªÉu d·ªØ li·ªáu c√≥ NaN: da_kieu_du_lieu_nan.xlsx")
    
    dates = pd.date_range('2024-01-01', periods=150, freq='D')
    
    data = {
        'Date': dates,
        'Integer_Col': np.random.randint(1, 1000, 150),
        'Float_Col': np.random.uniform(0.1, 99.9, 150),
        'String_Col': [f'Text_{i}' for i in range(150)],
        'Boolean_Col': np.random.choice([True, False], 150),
        'Category_Col': np.random.choice(['Cat1', 'Cat2', 'Cat3', 'Cat4'], 150),
        'Mixed_Col': [str(i) if i % 2 == 0 else i for i in range(150)],  # Mixed types
        'Email_Col': [f'user{i}@example.com' for i in range(150)],
        'Phone_Col': [f'09{np.random.randint(10000000, 99999999)}' for _ in range(150)],
        'Currency_Col': np.random.uniform(100000, 10000000, 150)
    }
    
    df = pd.DataFrame(data)
    
    # Inject NaN into different data types
    
    # Dates - 10% NaN
    nan_indices = np.random.choice(df.index, size=15, replace=False)
    df.loc[nan_indices, 'Date'] = pd.NaT
    
    # Integers - 20% NaN  
    nan_indices = np.random.choice(df.index, size=30, replace=False)
    df.loc[nan_indices, 'Integer_Col'] = np.nan
    
    # Floats - 15% NaN
    nan_indices = np.random.choice(df.index, size=22, replace=False)
    df.loc[nan_indices, 'Float_Col'] = np.nan
    
    # Strings - 25% NaN
    nan_indices = np.random.choice(df.index, size=37, replace=False)
    df.loc[nan_indices, 'String_Col'] = np.nan
    
    # Booleans - 30% NaN (tricky case)
    nan_indices = np.random.choice(df.index, size=45, replace=False)
    df.loc[nan_indices, 'Boolean_Col'] = np.nan
    
    # Categories - 12% NaN
    nan_indices = np.random.choice(df.index, size=18, replace=False)
    df.loc[nan_indices, 'Category_Col'] = np.nan
    
    # Mixed types - 40% NaN (very tricky)
    nan_indices = np.random.choice(df.index, size=60, replace=False)
    df.loc[nan_indices, 'Mixed_Col'] = np.nan
    
    # Emails - 8% NaN
    nan_indices = np.random.choice(df.index, size=12, replace=False)
    df.loc[nan_indices, 'Email_Col'] = np.nan
    
    # Currency - 18% NaN
    nan_indices = np.random.choice(df.index, size=27, replace=False)
    df.loc[nan_indices, 'Currency_Col'] = np.nan
    
    df.to_excel('da_kieu_du_lieu_nan.xlsx', index=False)
    
    total_nan = df.isnull().sum().sum()
    nan_percentage = (total_nan / df.size) * 100
    print(f"‚úÖ T·∫°o xong file ƒëa ki·ªÉu: {total_nan:,} NaN ({nan_percentage:.1f}%)")
    
    # Print data type info
    print(f"\nüìã Ki·ªÉu d·ªØ li·ªáu v√† NaN:")
    for col in df.columns:
        nan_count = df[col].isnull().sum()
        dtype = df[col].dtype
        print(f"   ‚Ä¢ {col} ({dtype}): {nan_count} NaN")
    
    return 'da_kieu_du_lieu_nan.xlsx'

if __name__ == "__main__":
    print("üèóÔ∏è ƒêANG T·∫†O C√ÅC FILE TEST CH·ª®C NƒÇNG X·ª¨ L√ù NaN...")
    print("=" * 60)
    
    files = []
    
    # 1. File ch√≠nh ƒë·ªÉ test
    files.append(create_sample_data_with_nan())
    
    # 2. File edge cases
    files.append(create_extreme_nan_data())
    
    # 3. File ƒëa ki·ªÉu d·ªØ li·ªáu
    files.append(create_mixed_data_types_with_nan())
    
    print("\n" + "=" * 60)
    print("‚úÖ HO√ÄN TH√ÄNH! ƒê√£ t·∫°o 3 file test ch·ª©c nƒÉng x·ª≠ l√Ω NaN:")
    print("=" * 60)
    
    print(f"\n1. üìä {files[0]} - File ch√≠nh ƒë·ªÉ test")
    print("   ‚Ä¢ Nhi·ªÅu t√¨nh hu·ªëng NaN kh√°c nhau (5% ƒë·∫øn 60%)")
    print("   ‚Ä¢ C·∫£ c·ªôt s·ªë v√† c·ªôt text")
    print("   ‚Ä¢ Ph√π h·ª£p test m·ªçi chi·∫øn l∆∞·ª£c x·ª≠ l√Ω")
    
    print(f"\n2. ‚ö†Ô∏è {files[1]} - File edge cases")
    print("   ‚Ä¢ NaN c·ª±c ƒë·ªô (80-95%)")
    print("   ‚Ä¢ C·ªôt to√†n NaN")
    print("   ‚Ä¢ Test kh·∫£ nƒÉng x·ª≠ l√Ω t√¨nh hu·ªëng kh√≥")
    
    print(f"\n3. üîß {files[2]} - File ƒëa ki·ªÉu d·ªØ li·ªáu")
    print("   ‚Ä¢ Date, Boolean, Mixed types v·ªõi NaN") 
    print("   ‚Ä¢ Test x·ª≠ l√Ω NaN cho m·ªçi ki·ªÉu d·ªØ li·ªáu")
    
    print(f"\nüéØ KHUY·∫æN NGH·ªä:")
    print(f"   ‚Ä¢ B·∫Øt ƒë·∫ßu v·ªõi: {files[0]}")
    print(f"   ‚Ä¢ Test v·ªõi c√°c c·ªôt c√≥ NaN √≠t (Region, Sales)")
    print(f"   ‚Ä¢ Th·ª≠ c√°c chi·∫øn l∆∞·ª£c: Auto, Fill median/mode, Drop rows")
    print(f"   ‚Ä¢ Quan s√°t c·∫£nh b√°o v·ªõi c·ªôt Rating (60% NaN)")
    
    print(f"\nüìà C√ÅC SCENARIO TEST NaN:")
    print(f"   1. Region (5% NaN) + Sales (10% NaN) ‚Üí Bi·ªÉu ƒë·ªì c·ªôt")
    print(f"   2. Product + Quantity (15% NaN) ‚Üí Bi·ªÉu ƒë·ªì tr√≤n") 
    print(f"   3. Salesperson (25% NaN) + Cost (20% NaN) ‚Üí Test c·∫£nh b√°o")
    print(f"   4. So s√°nh k·∫øt qu·∫£ v·ªõi/kh√¥ng x·ª≠ l√Ω NaN")
    
    print(f"\n‚öôÔ∏è TEST CH·ª®C NƒÇNG:")
    print(f"   ‚úÖ Ph√°t hi·ªán NaN t·ª± ƒë·ªông")
    print(f"   ‚úÖ G·ª£i √Ω gi√° tr·ªã thay th·∫ø th√¥ng minh")
    print(f"   ‚úÖ C·∫£nh b√°o c·ªôt c√≥ qu√° nhi·ªÅu NaN")
    print(f"   ‚úÖ Preview tr∆∞·ªõc/sau x·ª≠ l√Ω")
    print(f"   ‚úÖ Export k·∫øt qu·∫£ ƒë√£ x·ª≠ l√Ω")