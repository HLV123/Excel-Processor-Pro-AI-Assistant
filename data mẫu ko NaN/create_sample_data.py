import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import random

# Set random seed for reproducible data
np.random.seed(42)
random.seed(42)

def create_sample_excel_files():
    """T·∫°o nhi·ªÅu file Excel m·∫´u v·ªõi d·ªØ li·ªáu ƒëa d·∫°ng"""
    
    # 1. DOANH S·ªê B√ÅN H√ÄNG - File ch√≠nh ƒë·ªÉ test
    print("T·∫°o file: doanh_so_ban_hang.xlsx")
    
    regions = ['H√† N·ªôi', 'TP.HCM', 'ƒê√† N·∫µng', 'H·∫£i Ph√≤ng', 'C·∫ßn Th∆°', 'Nha Trang', 'Hu·∫ø', 'V≈©ng T√†u']
    products = ['Laptop Dell', 'Laptop HP', 'Laptop Asus', 'iPhone 15', 'Samsung Galaxy', 'iPad Pro', 
                'MacBook Air', 'Surface Pro', 'Gaming PC', 'Monitor 4K', 'Chu·ªôt gaming', 'B√†n ph√≠m c∆°']
    months = ['2024-01', '2024-02', '2024-03', '2024-04', '2024-05', '2024-06',
              '2024-07', '2024-08', '2024-09', '2024-10', '2024-11', '2024-12']
    
    sales_data = []
    for _ in range(500):  # 500 b·∫£n ghi
        sales_data.append({
            'Region': np.random.choice(regions),
            'Product': np.random.choice(products),
            'Month': np.random.choice(months),
            'Sales': np.random.randint(50000, 2000000),  # 50k - 2M VNƒê
            'Quantity': np.random.randint(1, 50),
            'Cost': np.random.randint(20000, 1500000),
            'Profit': lambda x: x['Sales'] - x['Cost'],
            'Salesperson': np.random.choice(['Nguy·ªÖn VƒÉn A', 'Tr·∫ßn Th·ªã B', 'L√™ VƒÉn C', 'Ph·∫°m Th·ªã D', 'Ho√†ng VƒÉn E'])
        })
    
    # Calculate profit
    for record in sales_data:
        record['Profit'] = record['Sales'] - record['Cost']
        record['Profit_Margin'] = round((record['Profit'] / record['Sales']) * 100, 2)
    
    df_sales = pd.DataFrame(sales_data)
    df_sales.to_excel('doanh_so_ban_hang.xlsx', index=False)
    
    # 2. NH√ÇN S·ª∞ C√îNG TY
    print("T·∫°o file: nhan_su_cong_ty.xlsx")
    
    departments = ['IT', 'Marketing', 'Sales', 'HR', 'Finance', 'Operations', 'R&D']
    positions = ['Nh√¢n vi√™n', 'Tr∆∞·ªüng nh√≥m', 'Qu·∫£n l√Ω', 'Gi√°m ƒë·ªëc']
    cities = ['H√† N·ªôi', 'TP.HCM', 'ƒê√† N·∫µng', 'H·∫£i Ph√≤ng', 'C·∫ßn Th∆°']
    
    hr_data = []
    for i in range(300):  # 300 nh√¢n vi√™n
        base_salary = np.random.randint(8000000, 50000000)  # 8M - 50M VNƒê
        hr_data.append({
            'Employee_ID': f'EMP{i+1:03d}',
            'Name': f'Nh√¢n vi√™n {i+1}',
            'Department': np.random.choice(departments),
            'Position': np.random.choice(positions),
            'City': np.random.choice(cities),
            'Age': np.random.randint(22, 60),
            'Years_Experience': np.random.randint(0, 30),
            'Base_Salary': base_salary,
            'Bonus': np.random.randint(0, base_salary//4),
            'Total_Salary': lambda x: x['Base_Salary'] + x['Bonus'],
            'Performance_Score': round(np.random.uniform(1.0, 5.0), 1),
            'Hire_Date': (datetime.now() - timedelta(days=np.random.randint(30, 3650))).strftime('%Y-%m-%d')
        })
    
    # Calculate total salary
    for record in hr_data:
        record['Total_Salary'] = record['Base_Salary'] + record['Bonus']
    
    df_hr = pd.DataFrame(hr_data)
    df_hr.to_excel('nhan_su_cong_ty.xlsx', index=False)
    
    # 3. KH·∫¢O S√ÅT H√ÄI L√íNG KH√ÅCH H√ÄNG
    print("T·∫°o file: khao_sat_khach_hang.xlsx")
    
    services = ['D·ªãch v·ª• A', 'D·ªãch v·ª• B', 'D·ªãch v·ª• C', 'D·ªãch v·ª• D', 'D·ªãch v·ª• E']
    age_groups = ['18-25', '26-35', '36-45', '46-55', '55+']
    genders = ['Nam', 'N·ªØ']
    
    survey_data = []
    for i in range(800):  # 800 ph·∫£n h·ªìi
        survey_data.append({
            'Response_ID': f'R{i+1:04d}',
            'Service': np.random.choice(services),
            'Age_Group': np.random.choice(age_groups),
            'Gender': np.random.choice(genders),
            'Region': np.random.choice(regions),
            'Satisfaction_Score': np.random.randint(1, 6),  # 1-5 scale
            'Recommend_Score': np.random.randint(1, 11),   # 1-10 scale
            'Price_Rating': np.random.randint(1, 6),
            'Quality_Rating': np.random.randint(1, 6),
            'Support_Rating': np.random.randint(1, 6),
            'Overall_Experience': np.random.choice(['R·∫•t t·ªët', 'T·ªët', 'Trung b√¨nh', 'K√©m', 'R·∫•t k√©m']),
            'Will_Return': np.random.choice(['C√≥', 'Kh√¥ng', 'C√≥ th·ªÉ']),
            'Survey_Date': (datetime.now() - timedelta(days=np.random.randint(1, 365))).strftime('%Y-%m-%d')
        })
    
    df_survey = pd.DataFrame(survey_data)
    df_survey.to_excel('khao_sat_khach_hang.xlsx', index=False)
    
    # 4. B√ÅO C√ÅO T√ÄI CH√çNH
    print("T·∫°o file: bao_cao_tai_chinh.xlsx")
    
    quarters = ['Q1 2023', 'Q2 2023', 'Q3 2023', 'Q4 2023', 
                'Q1 2024', 'Q2 2024', 'Q3 2024', 'Q4 2024']
    categories = ['Doanh thu', 'Chi ph√≠ v·∫≠n h√†nh', 'Chi ph√≠ marketing', 'Chi ph√≠ nh√¢n s·ª±', 
                  'L·ª£i nhu·∫≠n g·ªôp', 'Thu·∫ø', 'L·ª£i nhu·∫≠n r√≤ng']
    
    finance_data = []
    for quarter in quarters:
        for category in categories:
            if category == 'Doanh thu':
                amount = np.random.randint(50000000, 200000000)  # 50M - 200M
            elif 'Chi ph√≠' in category:
                amount = np.random.randint(10000000, 80000000)   # 10M - 80M
            elif 'L·ª£i nhu·∫≠n' in category:
                amount = np.random.randint(5000000, 50000000)    # 5M - 50M
            else:  # Thu·∫ø
                amount = np.random.randint(2000000, 15000000)    # 2M - 15M
            
            finance_data.append({
                'Quarter': quarter,
                'Category': category,
                'Amount': amount,
                'Currency': 'VNƒê',
                'Year': int(quarter.split()[-1]),
                'Quarter_Number': quarter.split()[0]
            })
    
    df_finance = pd.DataFrame(finance_data)
    df_finance.to_excel('bao_cao_tai_chinh.xlsx', index=False)
    
    # 5. TH·ªêNG K√ä WEBSITE
    print("T·∫°o file: thong_ke_website.xlsx")
    
    pages = ['Trang ch·ªß', 'S·∫£n ph·∫©m', 'D·ªãch v·ª•', 'Li√™n h·ªá', 'Blog', 'Gi·ªõi thi·ªáu']
    sources = ['Google', 'Facebook', 'Direct', 'Email', 'YouTube', 'Instagram']
    devices = ['Desktop', 'Mobile', 'Tablet']
    
    web_data = []
    base_date = datetime.now() - timedelta(days=90)
    
    for i in range(1000):  # 1000 sessions
        session_date = base_date + timedelta(days=np.random.randint(0, 90))
        web_data.append({
            'Date': session_date.strftime('%Y-%m-%d'),
            'Page': np.random.choice(pages),
            'Traffic_Source': np.random.choice(sources),
            'Device': np.random.choice(devices),
            'Sessions': np.random.randint(1, 50),
            'Page_Views': np.random.randint(1, 100),
            'Bounce_Rate': round(np.random.uniform(0.1, 0.8), 2),
            'Avg_Session_Duration': np.random.randint(30, 600),  # seconds
            'Conversions': np.random.randint(0, 10),
            'Revenue': np.random.randint(0, 5000000),  # VNƒê
            'New_Users': np.random.randint(0, 30),
            'Returning_Users': np.random.randint(0, 20)
        })
    
    df_web = pd.DataFrame(web_data)
    df_web.to_excel('thong_ke_website.xlsx', index=False)
    
    # 6. QU·∫¢N L√ù KHO H√ÄNG
    print("T·∫°o file: quan_ly_kho.xlsx")
    
    warehouses = ['Kho A - H√† N·ªôi', 'Kho B - TP.HCM', 'Kho C - ƒê√† N·∫µng', 'Kho D - C·∫ßn Th∆°']
    product_categories = ['ƒêi·ªán t·ª≠', 'Gia d·ª•ng', 'Th·ªùi trang', 'S√°ch', 'Th·ªÉ thao', 'L√†m ƒë·∫πp']
    
    inventory_data = []
    for i in range(400):  # 400 s·∫£n ph·∫©m
        current_stock = np.random.randint(0, 1000)
        min_stock = np.random.randint(10, 100)
        max_stock = np.random.randint(500, 2000)
        
        inventory_data.append({
            'Product_Code': f'P{i+1:04d}',
            'Product_Name': f'S·∫£n ph·∫©m {i+1}',
            'Category': np.random.choice(product_categories),
            'Warehouse': np.random.choice(warehouses),
            'Current_Stock': current_stock,
            'Min_Stock_Level': min_stock,
            'Max_Stock_Level': max_stock,
            'Unit_Price': np.random.randint(50000, 2000000),
            'Total_Value': lambda x: x['Current_Stock'] * x['Unit_Price'],
            'Supplier': f'Nh√† cung c·∫•p {np.random.randint(1, 20)}',
            'Last_Restock_Date': (datetime.now() - timedelta(days=np.random.randint(1, 180))).strftime('%Y-%m-%d'),
            'Status': 'Thi·∫øu h√†ng' if current_stock < min_stock else 'B√¨nh th∆∞·ªùng',
            'Lead_Time_Days': np.random.randint(1, 30)
        })
    
    # Calculate total value
    for record in inventory_data:
        record['Total_Value'] = record['Current_Stock'] * record['Unit_Price']
    
    df_inventory = pd.DataFrame(inventory_data)
    df_inventory.to_excel('quan_ly_kho.xlsx', index=False)
    
    print("\n‚úÖ ƒê√£ t·∫°o th√†nh c√¥ng 6 file Excel m·∫´u:")
    print("1. doanh_so_ban_hang.xlsx - D·ªØ li·ªáu b√°n h√†ng (500 b·∫£n ghi)")
    print("2. nhan_su_cong_ty.xlsx - D·ªØ li·ªáu nh√¢n s·ª± (300 nh√¢n vi√™n)")
    print("3. khao_sat_khach_hang.xlsx - Kh·∫£o s√°t h√†i l√≤ng (800 ph·∫£n h·ªìi)")
    print("4. bao_cao_tai_chinh.xlsx - B√°o c√°o t√†i ch√≠nh (56 b·∫£n ghi)")
    print("5. thong_ke_website.xlsx - Th·ªëng k√™ web (1000 sessions)")
    print("6. quan_ly_kho.xlsx - Qu·∫£n l√Ω kho (400 s·∫£n ph·∫©m)")
    
    return [
        'doanh_so_ban_hang.xlsx',
        'nhan_su_cong_ty.xlsx', 
        'khao_sat_khach_hang.xlsx',
        'bao_cao_tai_chinh.xlsx',
        'thong_ke_website.xlsx',
        'quan_ly_kho.xlsx'
    ]

if __name__ == "__main__":
    files = create_sample_excel_files()
    
    # In th√¥ng tin chi ti·∫øt v·ªÅ t·ª´ng file
    print("\n" + "="*60)
    print("CHI TI·∫æT C√ÅC FILE M·∫™U:")
    print("="*60)
    
    print("\nüìä DOANH S·ªê B√ÅN H√ÄNG (doanh_so_ban_hang.xlsx)")
    print("- C·ªôt X g·ª£i √Ω: Region, Product, Month")  
    print("- C·ªôt Y g·ª£i √Ω: Sales, Quantity, Profit")
    print("- Ph√π h·ª£p: Bi·ªÉu ƒë·ªì c·ªôt, tr√≤n, ƒë∆∞·ªùng")
    
    print("\nüë• NH√ÇN S·ª∞ C√îNG TY (nhan_su_cong_ty.xlsx)")
    print("- C·ªôt X g·ª£i √Ω: Department, Position, City")
    print("- C·ªôt Y g·ª£i √Ω: Base_Salary, Total_Salary, Age")
    print("- Ph√π h·ª£p: Bi·ªÉu ƒë·ªì c·ªôt, tr√≤n")
    
    print("\nüìã KH·∫¢O S√ÅT KH√ÅCH H√ÄNG (khao_sat_khach_hang.xlsx)")
    print("- C·ªôt X g·ª£i √Ω: Service, Age_Group, Region")
    print("- C·ªôt Y g·ª£i √Ω: Satisfaction_Score, Recommend_Score")
    print("- Ph√π h·ª£p: Bi·ªÉu ƒë·ªì c·ªôt, tr√≤n")
    
    print("\nüí∞ B√ÅO C√ÅO T√ÄI CH√çNH (bao_cao_tai_chinh.xlsx)")
    print("- C·ªôt X g·ª£i √Ω: Quarter, Category")
    print("- C·ªôt Y g·ª£i √Ω: Amount")
    print("- Ph√π h·ª£p: Bi·ªÉu ƒë·ªì c·ªôt, ƒë∆∞·ªùng")
    
    print("\nüåê TH·ªêNG K√ä WEBSITE (thong_ke_website.xlsx)")
    print("- C·ªôt X g·ª£i √Ω: Page, Traffic_Source, Device")
    print("- C·ªôt Y g·ª£i √Ω: Sessions, Page_Views, Revenue")
    print("- Ph√π h·ª£p: Bi·ªÉu ƒë·ªì c·ªôt, tr√≤n, ƒë∆∞·ªùng")
    
    print("\nüì¶ QU·∫¢N L√ù KHO (quan_ly_kho.xlsx)")
    print("- C·ªôt X g·ª£i √Ω: Category, Warehouse, Status")
    print("- C·ªôt Y g·ª£i √Ω: Current_Stock, Total_Value, Unit_Price")
    print("- Ph√π h·ª£p: Bi·ªÉu ƒë·ªì c·ªôt, tr√≤n")
    
    print(f"\nüéØ FILE KHUY·∫æN NGH·ªä ƒê·ªÇ TEST: doanh_so_ban_hang.xlsx")
    print("   (C√≥ nhi·ªÅu d·ªØ li·ªáu ƒëa d·∫°ng, ph√π h·ª£p test m·ªçi t√≠nh nƒÉng)")